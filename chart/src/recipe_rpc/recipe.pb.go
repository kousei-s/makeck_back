// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v3.21.12
// source: recipe.proto

package recipe_rpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// LastStateの列挙型
type LastState int32

const (
	LastState_HOT    LastState = 0
	LastState_REHEAT LastState = 1
	LastState_COOL   LastState = 2
	LastState_NORMAL LastState = 3
)

// Enum value maps for LastState.
var (
	LastState_name = map[int32]string{
		0: "HOT",
		1: "REHEAT",
		2: "COOL",
		3: "NORMAL",
	}
	LastState_value = map[string]int32{
		"HOT":    0,
		"REHEAT": 1,
		"COOL":   2,
		"NORMAL": 3,
	}
)

func (x LastState) Enum() *LastState {
	p := new(LastState)
	*p = x
	return p
}

func (x LastState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LastState) Descriptor() protoreflect.EnumDescriptor {
	return file_recipe_proto_enumTypes[0].Descriptor()
}

func (LastState) Type() protoreflect.EnumType {
	return &file_recipe_proto_enumTypes[0]
}

func (x LastState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LastState.Descriptor instead.
func (LastState) EnumDescriptor() ([]byte, []int) {
	return file_recipe_proto_rawDescGZIP(), []int{0}
}

// ProcessTypeの列挙型
type ProcessType int32

const (
	ProcessType_COOK    ProcessType = 0
	ProcessType_PREPARE ProcessType = 1
	ProcessType_FINISH  ProcessType = 2
)

// Enum value maps for ProcessType.
var (
	ProcessType_name = map[int32]string{
		0: "COOK",
		1: "PREPARE",
		2: "FINISH",
	}
	ProcessType_value = map[string]int32{
		"COOK":    0,
		"PREPARE": 1,
		"FINISH":  2,
	}
)

func (x ProcessType) Enum() *ProcessType {
	p := new(ProcessType)
	*p = x
	return p
}

func (x ProcessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessType) Descriptor() protoreflect.EnumDescriptor {
	return file_recipe_proto_enumTypes[1].Descriptor()
}

func (ProcessType) Type() protoreflect.EnumType {
	return &file_recipe_proto_enumTypes[1]
}

func (x ProcessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessType.Descriptor instead.
func (ProcessType) EnumDescriptor() ([]byte, []int) {
	return file_recipe_proto_rawDescGZIP(), []int{1}
}

// 材料
type Material struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`      // 材料ID
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`    // 材料名
	Count         int32                  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"` // 個数
	Unit          string                 `protobuf:"bytes,4,opt,name=unit,proto3" json:"unit,omitempty"`    // 単位
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Material) Reset() {
	*x = Material{}
	mi := &file_recipe_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Material) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Material) ProtoMessage() {}

func (x *Material) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Material.ProtoReflect.Descriptor instead.
func (*Material) Descriptor() ([]byte, []int) {
	return file_recipe_proto_rawDescGZIP(), []int{0}
}

func (x *Material) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Material) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Material) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Material) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

// レシピ
type Recipe struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                                                     // レシピID
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                   // 料理名
	Image         string                 `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`                                                 // 画像パス
	Process       []*Process             `protobuf:"bytes,4,rep,name=process,proto3" json:"process,omitempty"`                                             // 手順
	LastState     LastState              `protobuf:"varint,5,opt,name=last_state,json=lastState,proto3,enum=recipe.LastState" json:"last_state,omitempty"` // 最終状態
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Recipe) Reset() {
	*x = Recipe{}
	mi := &file_recipe_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Recipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recipe) ProtoMessage() {}

func (x *Recipe) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recipe.ProtoReflect.Descriptor instead.
func (*Recipe) Descriptor() ([]byte, []int) {
	return file_recipe_proto_rawDescGZIP(), []int{1}
}

func (x *Recipe) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Recipe) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Recipe) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Recipe) GetProcess() []*Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *Recipe) GetLastState() LastState {
	if x != nil {
		return x.LastState
	}
	return LastState_HOT
}

// 器具
type Tools struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`      // 器具ID
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`    // 器具名
	Count         int32                  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"` // 個数
	Unit          string                 `protobuf:"bytes,4,opt,name=unit,proto3" json:"unit,omitempty"`    // 単位
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tools) Reset() {
	*x = Tools{}
	mi := &file_recipe_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tools) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tools) ProtoMessage() {}

func (x *Tools) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tools.ProtoReflect.Descriptor instead.
func (*Tools) Descriptor() ([]byte, []int) {
	return file_recipe_proto_rawDescGZIP(), []int{2}
}

func (x *Tools) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Tools) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tools) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Tools) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

// 手順
type Process struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                                    // 手順ID
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                  // 名前
	DisplayName   string                 `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"` // 表示名
	Description   string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`                    // 説明
	Parallel      bool                   `protobuf:"varint,5,opt,name=parallel,proto3" json:"parallel,omitempty"`                         // 平行可、不可
	Time          int32                  `protobuf:"varint,6,opt,name=time,proto3" json:"time,omitempty"`                                 // 所要時間
	Tools         []*Tools               `protobuf:"bytes,7,rep,name=tools,proto3" json:"tools,omitempty"`                                // 必要器具
	Material      []*Material            `protobuf:"bytes,8,rep,name=material,proto3" json:"material,omitempty"`                          // 材料
	Recipeid      string                 `protobuf:"bytes,9,opt,name=recipeid,proto3" json:"recipeid,omitempty"`                          // レシピID
	Type          ProcessType            `protobuf:"varint,10,opt,name=type,proto3,enum=recipe.ProcessType" json:"type,omitempty"`        // 手順の種類
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Process) Reset() {
	*x = Process{}
	mi := &file_recipe_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Process) ProtoMessage() {}

func (x *Process) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Process.ProtoReflect.Descriptor instead.
func (*Process) Descriptor() ([]byte, []int) {
	return file_recipe_proto_rawDescGZIP(), []int{3}
}

func (x *Process) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Process) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Process) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Process) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Process) GetParallel() bool {
	if x != nil {
		return x.Parallel
	}
	return false
}

func (x *Process) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Process) GetTools() []*Tools {
	if x != nil {
		return x.Tools
	}
	return nil
}

func (x *Process) GetMaterial() []*Material {
	if x != nil {
		return x.Material
	}
	return nil
}

func (x *Process) GetRecipeid() string {
	if x != nil {
		return x.Recipeid
	}
	return ""
}

func (x *Process) GetType() ProcessType {
	if x != nil {
		return x.Type
	}
	return ProcessType_COOK
}

// リクエストとレスポンスメッセージ
type RecipeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"` // レシピID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecipeRequest) Reset() {
	*x = RecipeRequest{}
	mi := &file_recipe_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeRequest) ProtoMessage() {}

func (x *RecipeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeRequest.ProtoReflect.Descriptor instead.
func (*RecipeRequest) Descriptor() ([]byte, []int) {
	return file_recipe_proto_rawDescGZIP(), []int{4}
}

func (x *RecipeRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

var File_recipe_proto protoreflect.FileDescriptor

var file_recipe_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x22, 0x5a, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x57, 0x0a, 0x05, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22,
	0xbc, 0x02, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c,
	0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c,
	0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x2e, 0x54,
	0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52,
	0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x21,
	0x0a, 0x0d, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x2a, 0x36, 0x0a, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x07,
	0x0a, 0x03, 0x48, 0x4f, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x48, 0x45, 0x41,
	0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f, 0x4f, 0x4c, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x03, 0x2a, 0x30, 0x0a, 0x0b, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f, 0x4f, 0x4b,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x02, 0x32, 0x43, 0x0a, 0x0d, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x15, 0x2e, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0e, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2e, 0x2f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x72, 0x70,
	0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_recipe_proto_rawDescOnce sync.Once
	file_recipe_proto_rawDescData = file_recipe_proto_rawDesc
)

func file_recipe_proto_rawDescGZIP() []byte {
	file_recipe_proto_rawDescOnce.Do(func() {
		file_recipe_proto_rawDescData = protoimpl.X.CompressGZIP(file_recipe_proto_rawDescData)
	})
	return file_recipe_proto_rawDescData
}

var file_recipe_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_recipe_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_recipe_proto_goTypes = []any{
	(LastState)(0),        // 0: recipe.LastState
	(ProcessType)(0),      // 1: recipe.ProcessType
	(*Material)(nil),      // 2: recipe.Material
	(*Recipe)(nil),        // 3: recipe.Recipe
	(*Tools)(nil),         // 4: recipe.Tools
	(*Process)(nil),       // 5: recipe.Process
	(*RecipeRequest)(nil), // 6: recipe.RecipeRequest
}
var file_recipe_proto_depIdxs = []int32{
	5, // 0: recipe.Recipe.process:type_name -> recipe.Process
	0, // 1: recipe.Recipe.last_state:type_name -> recipe.LastState
	4, // 2: recipe.Process.tools:type_name -> recipe.Tools
	2, // 3: recipe.Process.material:type_name -> recipe.Material
	1, // 4: recipe.Process.type:type_name -> recipe.ProcessType
	6, // 5: recipe.RecipeService.GetRecipe:input_type -> recipe.RecipeRequest
	3, // 6: recipe.RecipeService.GetRecipe:output_type -> recipe.Recipe
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_recipe_proto_init() }
func file_recipe_proto_init() {
	if File_recipe_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_recipe_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_recipe_proto_goTypes,
		DependencyIndexes: file_recipe_proto_depIdxs,
		EnumInfos:         file_recipe_proto_enumTypes,
		MessageInfos:      file_recipe_proto_msgTypes,
	}.Build()
	File_recipe_proto = out.File
	file_recipe_proto_rawDesc = nil
	file_recipe_proto_goTypes = nil
	file_recipe_proto_depIdxs = nil
}
