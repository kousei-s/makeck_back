package services

import (
	"chart/utils"
	"log"
)

// Recipe はレシピ情報を表します
type Recipes struct {
	Uid     string    `json:"uid"`     // レシピのユニークID
	Name    string    `json:"name"`    // レシピ名
	Process []Process `json:"process"` // プロセスのリスト
}

// Process はレシピのプロセス情報を表します
type Processes struct {
	Uid         string      `json:"uid"`         // プロセスのユニークID
	Name        string      `json:"name"`        // プロセス名
	Displayname string      `json:"displayname"` // 表示名
	Description string      `json:"description"` // 説明
	Parallel    bool        `json:"parallel"`    // 並行処理かどうか
	Time        int         `json:"time"`        // 所要時間
	Type        ProcessType `json:"type"`        // 手順の種類
}

// Task はタスク情報を表します
type Task struct {
	Tejuns    map[string]Tejun `json:"tejuns"`    // 手順情報
	StartTime int              `json:"startTime"` // 開始時間
}

// Tejun は手順情報を表します
type Tejun struct {
	Id   string `json:"id,omitempty"`   // 手順ID (オプション)
	Name string `json:"name,omitempty"` // 手順名 (オプション)
	Time int    `json:"time,omitempty"` // 所要時間 (オプション)
}

// RecipeCollection はレシピとタスクのコレクションを表します
type RecipeCollection struct {
	Recipes []ShortRecipe `json:"recipies"` // レシピのリスト
	Tasks   []Task        `json:"tasks"`    // タスクのリスト
}

// ShortRecipe は簡略化されたレシピ情報を表します
type ShortRecipe struct {
	Uid        string // レシピのユニークID
	Name       string // レシピ名
	LastSatate LastSatate
	Divide     []TaskDivide // タスクの分割情報
	Times      int          // 累計時間
	Isused     bool         //既にタスクが入れられたか(default:false)
}

// TaskDivide はタスクの分割情報を表します
type TaskDivide struct {
	Uid      string      // タスクのユニークID
	Time     int         // 所要時間
	Parallel bool        // 並行処理かどうか
	Type     ProcessType // 手順の種類
}

// chart_Register はレシピからタスクを生成するメソッド
func chart_Register(recipes []Recipe) (RecipeCollection, error) {
	// レシピを簡略化した形式に変換
	simple_recipe, err := chart_Extraction(recipes)
	if err != nil {
		return RecipeCollection{}, err
	}

	// 優先度を決定するメソッド
	prioritys_recepi, err := chart_Priority(simple_recipe)
	if err != nil {
		return RecipeCollection{}, err
	}

	log.Println(prioritys_recepi) // 優先度のログ出力

	tasks := []Task{}

	// 優先度に基づいてタスクを生成
	for _, prioritys := range prioritys_recepi {
		task, err := chart_CreateTask(simple_recipe, prioritys) // Task型を取得
		if err != nil {
			return RecipeCollection{}, err
		}

		tasks = append(tasks, task...) // タスクを追加
	}

	// タスクコレクションを生成
	tasks_collection := RecipeCollection{
		Recipes: nil, // simple_recipe,
		Tasks:   tasks,
	}

	return tasks_collection, nil // 生成したタスクを返す
}

// chart_Extraction はレシピから必要な情報を抽出するメソッド
func chart_Extraction(recipes []Recipe) ([]ShortRecipe, error) {
	shortRecipes := make([]ShortRecipe, len(recipes)) // 簡略化レシピのスライスを初期化
	for i, recipe := range recipes {
		times := 0
		tasks := make([]TaskDivide, len(recipe.Process)) // タスクのスライスを初期化
		for j := range recipe.Process {
			uuid, err := utils.Genid() // ユニークIDを生成
			if err != nil {
				return []ShortRecipe{}, err
			}
			tasks[j] = TaskDivide{
				Uid:      uuid,
				Time:     recipe.Process[j].Time,
				Parallel: recipe.Process[j].Parallel,
				Type:     recipe.Process[j].Type,
			}
			times += recipe.Process[j].Time // 所要時間を合計

		}
		shortRecipes[i] = ShortRecipe{
			Uid:        recipe.Uid,
			Name:       recipe.Name,
			LastSatate: recipe.LastState,
			Divide:     tasks,
			Times:      times,
			Isused:     false,
		}
	}

	// JSON形式で出力
	// result, err := json.MarshalIndent(shortRecipes, "", "  ")
	// if err != nil {
	// 	return []ShortRecipe{}, err
	// }

	return shortRecipes, nil // 簡略化レシピを返す
}

// chart_Priority はレシピの優先度を決定するメソッド
func chart_Priority(recipes []ShortRecipe) ([]string, error) {
	// 各状態に対応するレシピのUIDを格納するマップ
	stateMap := map[string][]string{
		"hot":    {},
		"reheat": {},
		"normal": {},
		"cool":   {},
	}

	// 各レシピの状態を確認し、マップに追加
	for _, recipe := range recipes {
		switch recipe.LastSatate {
		case "hot":
			stateMap["hot"] = append(stateMap["hot"], recipe.Uid)
		case "reheat":
			stateMap["reheat"] = append(stateMap["reheat"], recipe.Uid)
		case "normal":
			stateMap["normal"] = append(stateMap["normal"], recipe.Uid)
		case "cool":
			stateMap["cool"] = append(stateMap["cool"], recipe.Uid)
		}
	}

	// 優先度の順序でUIDを連結
	priority := append(append(append(stateMap["hot"], stateMap["reheat"]...), stateMap["normal"]...), stateMap["cool"]...)

	return priority, nil // 優先度リストを返す
}

// chart_CreateTask は優先度に基づいてタスクを作成するメソッド(未完成)
func chart_CreateTask(recipes []ShortRecipe, priority string) ([]Task, error) {
	log.Print("優先度", priority) // 優先度をログ出力

	// タスクを生成
	task := []Task{
		{
			StartTime: 0,                      // 開始時間は適宜設定
			Tejuns:    make(map[string]Tejun), // 手順情報のマップを初期化
		},
	}

	// 実際には、recipesから必要な手順を抽出して追加する必要がある
	for _, recipe := range recipes {
		for i := len(recipe.Divide) - 1; i >= 0; i-- {
			divide := recipe.Divide[i]
			if divide.Parallel {
				tejun := Tejun{}
				task[0].Tejuns[recipe.Uid] = tejun // 手順情報をマップに追加
			} else {
				tejun := Tejun{
					Id:   recipe.Uid,
					Name: string(divide.Type), // 手順名は適宜設定
					Time: recipe.Times,   // 所要時間は適宜設定
				}
				task[0].Tejuns[recipe.Uid] = tejun // 手順情報をマップに追加
			}
		}

	}

	return task, nil
}
